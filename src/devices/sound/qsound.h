// license:BSD-3-Clause
// copyright-holders:superctr, Valley Bell
/*********************************************************

  Capcom QSound DL-1425 (HLE)

*********************************************************/
#ifndef MAME_SOUND_QSOUNDHLE_H
#define MAME_SOUND_QSOUNDHLE_H

#pragma once

#include "cpu/dsp16/dsp16.h"

#define QSOUND_CLOCK 60000000 

#define MCFG_QSOUND_ADD(_tag, _clock) \
	MCFG_DEVICE_ADD(_tag, QSOUND, _clock)
#define MCFG_QSOUND_REPLACE(_tag, _clock) \
	MCFG_DEVICE_REPLACE(_tag, QSOUND, _clock)

class qsound_device : public device_t, public device_sound_interface
{
public:
	// default 60MHz clock (divided by 2 for DSP core clock, and then by 1248 for sample rate)
	qsound_device(machine_config const &mconfig, char const *tag, device_t *owner, uint32_t clock = 60'000'000);

	DECLARE_WRITE8_MEMBER(qsound_w);
	DECLARE_READ8_MEMBER(qsound_r);

protected:
	// device_t implementation

	virtual void device_start() override;
	virtual void device_reset() override;

	// device_sound_interface implementation
	virtual void sound_stream_update(sound_stream &stream, stream_sample_t **inputs, stream_sample_t **outputs, int samples) override;

	// device_rom_interface implementation
	//virtual void rom_bank_updated() override;

private:

	// DSP ROM sample map
	enum {
		DATA_PAN_TAB        = 0x110,
		DATA_ADPCM_TAB      = 0x9dc,
		DATA_FILTER_TAB     = 0xd53,    // dual filter mode, 5 tables * 95 taps each
		DATA_FILTER_TAB2    = 0xf2e,    // overlapping data (95+15+95)

		STATE_BOOT          = 0x000,
		STATE_INIT1         = 0x288,
		STATE_INIT2         = 0x61a,
		STATE_REFRESH1      = 0x039,
		STATE_REFRESH2      = 0x04f,
		STATE_NORMAL1       = 0x314,
		STATE_NORMAL2       = 0x6b2
	};

	uint16_t m_table110[0x20] = {
	0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000,	0xc000, 0xc666, 0xcccd, 0xd28f, 0xd70a, 0xdc29, 0xdeb8, 0xe3d7, 0xe7ae, 0xeb96, 0xee14, 0xf148, 0xf333, 0xf571, 0xf7ae, 0xf8f6,
	};

	uint16_t m_table140[0x20] = {
	0xc005, 0xc02e, 0xc07f, 0xc0f9, 0xc19b, 0xc264, 0xc355, 0xc46d, 0xc5aa, 0xc70c, 0xc893, 0xca3d, 0xcc09, 0xcdf6, 0xd004, 0xd22f,	0xd22f, 0xd478, 0xd6dd, 0xd95b, 0xdbf3, 0xdea1, 0xe164, 0xe43b, 0xe724, 0xea1c, 0xed23, 0xf035, 0xf352, 0xf676, 0xf9a1, 0xfccf,
	};

	uint16_t m_table173[0x20] = {
	0xf99a, 0xf852, 0xf666, 0xf47b, 0xf28f, 0xf000, 0xedc3, 0xeccd, 0xec00, 0xea8f, 0xe800, 0xe28f, 0xdd81,	0xdb85, 0xd99a, 0xd800,	0xd7ae, 0xd70a, 0xd6b8, 0xd666, 0xd1ec, 0xd000, 0xd000, 0xcf0a, 0xce98, 0xce14, 0xcde3, 0xcd71, 0xcccd,	0xcb96, 0xc8f6, 0xc000,
	};

	uint16_t m_table1d5[0x20] = {
	0xf8f6, 0xf7ae, 0xf571, 0xf333, 0xf148, 0xee14, 0xeb96, 0xe7ae, 0xe3d7, 0xdeb8, 0xdc29,	0xd70a, 0xd28f, 0xcccd, 0xc666, 0xc000,	0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000,	0xc000, 0xc000, 0xc000, 0xc000, 0xc000,
	};

	uint16_t m_table205[0x20] = {
	0xfccf, 0xf9a1, 0xf676, 0xf352, 0xf035, 0xed23, 0xea1c, 0xe724, 0xe43b, 0xe164, 0xdea1,	0xdbf3, 0xd95b, 0xd6dd, 0xd478, 0xd22f,	0xd22f, 0xd004, 0xcdf6, 0xcc09, 0xca3d, 0xc893, 0xc70c, 0xc5aa, 0xc46d, 0xc355, 0xc264,	0xc19b, 0xc0f9, 0xc07f, 0xc02e, 0xc005,
	};

	uint16_t m_table236[0x20] = {
	0xc000, 0xc8f6, 0xcb96, 0xcccd, 0xcd71, 0xcde3, 0xce14, 0xce98, 0xcf0a, 0xd000,	0xd000, 0xd1ec, 0xd666, 0xd6b8, 0xd70a, 0xd7ae,	0xd800, 0xd99a, 0xdb85, 0xdd81, 0xe28f, 0xe800, 0xea8f, 0xec00, 0xeccd, 0xedc3,	0xf000, 0xf28f, 0xf47b, 0xf666, 0xf852, 0xf99a,
	};

	uint16_t m_table980[0x6c] = {	
	0x7810, 0xb8d5, 0xb048, 0xb89c, 0x6011, 0x15c6, 0x5070, 0x01f8, 0x7810, 0x20d5, 0x6011, 0x7810, 0xb8d5, 0x6010, 0x5080, 0x09d2,	0xf844, 0x3020, 0x996e, 0x51e0, 0x0000, 0x49a0, 0x1ae2, 0xb8d4, 0x3180, 0xd002, 0x09d0, 0x5020, 0x00de, 0x5030, 0x0126, 0x5000,	0x0125, 0x3cd1, 0xb8d9, 0x31e0, 0x5110, 0x0033, 0x35a0, 0x5110, 0x012d, 0x3160, 0x9bc0, 0xe0d1, 0x3cd1, 0xb8d9, 0x31e0, 0x5110,	0x0033, 0x35a0, 0x5110, 0x0160, 0x3160, 0x9bc0, 0xe0d1, 0x3cd1, 0xb8d9, 0x31e0, 0x5110, 0x0033, 0x35a0, 0x5110, 0x0193, 0x3160,	0x9bc0, 0xe0d1, 0x3cd1, 0xb8d9, 0x31e0, 0x5110, 0x0033, 0x35a0, 0x5110, 0x01c6, 0x3160, 0x9bc0, 0xe0d1, 0x5110, 0x0000, 0xa0d4,	0x30c0, 0xc000, 0x0000, 0x3305, 0xfdc3, 0x023d, 0xc6b7, 0x778a, 0xfb86, 0x047a, 0x04f0, 0x0000, 0x009a, 0x009a, 0x0080, 0x0066,	0x004d, 0x003a, 0x003a, 0x003a, 0x003a, 0x003a, 0x003a, 0x003a, 0x004d, 0x0066, 0x0080, 0x009a,
	};

	uint16_t m_tabled56[0x59] = {
	0x0006, 0x002c, 0xffe8, 0xffcb, 0xfff6, 0x003b, 0xffd8, 0xffe5, 0x0001, 0x0027,	0xffe5, 0x0038, 0x007f, 0x00ae, 0x0024, 0xfff3, 0x0031, 0x00d4, 0x008e, 0x008f, 0xffb7, 0xffec, 0x0042, 0xff94, 0xff8b, 0xfe71,	0xfef7, 0xfe78, 0xfdc7, 0xfe27, 0xffb9, 0x005f, 0xfec1, 0xff26, 0xff1a, 0x014b, 0x027e, 0x01c1, 0x01dd, 0xff4c, 0x0214, 0x0453,	0x02ee, 0x26ab, 0x0ef4, 0xf68e, 0x042f, 0xff50, 0x00bf, 0xfe51, 0x0040, 0x0075, 0xff6a, 0xfeee, 0xff9f, 0xff12, 0x00a5, 0x00a6,	0x00fa, 0xffed, 0x0004, 0x0025, 0x00cc, 0x00ba, 0xfffa, 0x008c, 0xffb3, 0xffff, 0x0001, 0x0012, 0xfff6, 0xff69, 0xff6b, 0xff99,	0xfff7, 0x0037, 0x0017, 0xff9a, 0xff9f, 0xfff5, 0x000d, 0xffd0, 0xffe5, 0x0005, 0x0012, 0xffc3, 0xffe2, 0x0040, 0x0048,
	};

	uint16_t m_tabledb5[0x59] = {
	0x0055, 0x0018, 0xffb4, 0xff85, 0xffaa, 0xffe3, 0xfff2, 0xffec, 0xfff9, 0x0006, 0xffe4,	0xffa9, 0xffa7, 0xfffb, 0x0064, 0x009a, 0x00a0, 0x0096, 0x0076, 0x0029, 0xffd0, 0xffb2, 0xffe9, 0x003b, 0x0053, 0xfffe, 0xff50,	0xfeb3, 0xfea8, 0xff35, 0xffbe, 0xffd9, 0x0002, 0x00e0, 0x01ef, 0x01ef, 0x0118, 0x01b0, 0x053c, 0x09b3, 0x1501, 0x0771, 0x0292,	0x0000, 0x0061, 0x015b, 0x011d, 0x0023, 0xffa1, 0xffb2, 0xffae, 0xff69, 0xff40, 0xff55, 0xff6b, 0xff6d, 0xff8f, 0xffea, 0x0047,	0x0076, 0x0081, 0x007f, 0x006e, 0x0047, 0x001f, 0x0014, 0x0024, 0x002e, 0x0017, 0xffe5, 0xffc1, 0xffcb, 0xffeb, 0xffed, 0xffc4,	0xffa4, 0xffbb, 0xfff4, 0x0019, 0x001d, 0x001e, 0x0028, 0x0029, 0x001d, 0x001e, 0x002e, 0x0027, 0xfff1, 0xffb6,
	};

	uint16_t m_tablee14[0x59] = {
	0x0017, 0x002a, 0x002f, 0x001d, 0x000a, 0x0002, 0xfff2, 0xffca, 0xffa4, 0xffa3, 0xffba, 0xffc0,	0xffb3, 0xffc7, 0x0012, 0x005e, 0x0071, 0x0057, 0x0045, 0x0043, 0x0032, 0x0019, 0x001d, 0x003a, 0x003e, 0x0018, 0xffd9, 0xff7d,	0xff00, 0xfebb, 0xff16, 0xffd3, 0x003a, 0x004e, 0x00df, 0x01e5, 0x01f0, 0x007f, 0x0006, 0x0359, 0x08eb, 0x0a7b, 0x1340, 0x0530,	0x0084, 0x004f, 0x013a, 0x00bd, 0xffb0, 0xffa6, 0x0023, 0xffeb, 0xff46, 0xff3d, 0xff9d, 0xff78, 0xfefe, 0xff43, 0x0052, 0x0101,	0x00b9, 0x0035, 0x0029, 0x0054, 0x0044, 0x0026, 0x003f, 0x004d, 0x000e, 0xffc4, 0xffb9, 0xffb9, 0xff88, 0xff69, 0xffac, 0x000e,	0x001d, 0xfff8, 0x0007, 0x0042, 0x0045, 0x000c, 0xfffd, 0x0036, 0x005c, 0x0034, 0xfffa, 0xfff1, 0xfffe,
	};

	uint16_t m_tablee73[0x59] = {
	0x0002, 0xffe4, 0xffdb, 0xffef, 0x0000, 0xfff7, 0xffea, 0xfffd, 0x0023, 0x0034, 0x0027, 0x0014, 0x0007,	0xfffa, 0x0002, 0x0037, 0x0079, 0x0081, 0x0043, 0x0008, 0x0001, 0x0009, 0xfffa, 0xfff0, 0x0010, 0x0042, 0x0060, 0x0076, 0x0082,	0x004b, 0xffd1, 0xffa4, 0x002b, 0x00df, 0x00ef, 0x0097, 0x00db, 0x01b8, 0x01db, 0x00e2, 0x00ce, 0x03ac, 0x0834, 0x0a67, 0x1374,	0x0361, 0x0031, 0xffdf, 0x00ba, 0x00e7, 0x0067, 0x002a, 0x0072, 0x00bf, 0x00b8, 0x0074, 0x001d, 0xffd1, 0xffb8, 0xffeb, 0x003c,	0x0060, 0x0044, 0x001f, 0x0020, 0x003f, 0x0057, 0x004c, 0x0027, 0x0007, 0x000e, 0x0037, 0x0055, 0x0043, 0x0012, 0xfff4, 0xfffd,	0x0015, 0x0022, 0x001d, 0x0006, 0xffe5, 0xffcf, 0xffdb, 0xfffe, 0x0010, 0x0000, 0xffeb, 0xfff0,
	};

	uint16_t m_tableed2[0x59] = {
	0x0030, 0x0007, 0xffea, 0xffe3, 0xfff6, 0x0018, 0x0036, 0x003b, 0x001d, 0xffdc, 0xff8b, 0xff47, 0xff2b, 0xff47,	0xff9d, 0x000d, 0x005a, 0x0053, 0x0018, 0xfffb, 0x0017, 0x0035, 0x002f, 0x0026, 0x0038, 0x0043, 0x0039, 0x004b, 0x006b, 0x0010,	0xff0e, 0xfe48, 0xfe9d, 0xff88, 0xffdf, 0xffd1, 0x0098, 0x01f5, 0x01d8, 0xffc7, 0xfedc, 0x0220, 0x0791, 0x08e5, 0x1801, 0x04d8,	0x0099, 0x002f, 0x00c8, 0x0098, 0x0024, 0x0040, 0x0086, 0x004a, 0xffae, 0xff30, 0xfef6, 0xfef4, 0xff44, 0xffd6, 0x0041, 0x004a,	0x0038, 0x0059, 0x0085, 0x0072, 0x002c, 0xfffd, 0xffff, 0x0011, 0x001d, 0x001d, 0xfffe, 0xffb4, 0xff64, 0xff45, 0xff69, 0xffab,	0xffe1, 0xfffb, 0x0007, 0x0014, 0x0020, 0x0018, 0xfffb, 0xffec, 0x0006, 0x0030, 0x003e,
	};
	

	uint16_t m_tablef8d[0x13] = {
	0xfe8d, 0xff3c, 0xfef4,	0xfe00, 0xfed1, 0xfec5, 0xff48, 0xffb4, 0x0114, 0xff00, 0x012a, 0x00c4, 0x03de, 0x00ec, 0x045a, 0xff82,	0x1119, 0x1995, 0x0317,
	};

	uint16_t m_tables[0x1000];
	

	const uint16_t PAN_TABLE_DRY = 0;
	const uint16_t PAN_TABLE_WET = 98;
	const uint16_t PAN_TABLE_CH_OFFSET = 196;
	const uint16_t FILTER_ENTRY_SIZE = 95;
	const uint16_t DELAY_BASE_OFFSET = 0x554;
	const uint16_t DELAY_BASE_OFFSET2 = 0x53c;

	struct qsound_voice {
		uint16_t m_bank = 0;
		int16_t m_addr = 0; // top word is the sample address
		uint16_t m_phase = 0;
		uint16_t m_rate = 0;
		int16_t m_loop_len = 0;
		int16_t m_end_addr = 0;
		int16_t m_volume = 0;
		int16_t m_echo = 0;

		int16_t update(qsound_device &dsp, int32_t *echo_out);
	};

	struct qsound_adpcm {
		uint16_t m_start_addr = 0;
		uint16_t m_end_addr = 0;
		uint16_t m_bank = 0;
		int16_t m_volume = 0;
		uint16_t m_flag = 0;
		int16_t m_cur_vol = 0;
		int16_t m_step_size = 0;
		uint16_t m_cur_addr = 0;

		int16_t update(qsound_device &dsp, int16_t curr_sample, int nibble);
	};

	// Q1 Filter
	struct qsound_fir {
		int m_tap_count = 0;    // usually 95
		int m_delay_pos = 0;
		uint16_t m_table_pos = 0;
		int16_t m_taps[95] = { 0 };
		int16_t m_delay_line[95] = { 0 };

		int32_t apply(int16_t input);
	};

	// Delay line
	struct qsound_delay {
		int16_t m_delay = 0;
		int16_t m_volume = 0;
		int16_t m_write_pos = 0;
		int16_t m_read_pos = 0;
		int16_t m_delay_line[51] = { 0 };

		int32_t apply(const int32_t input);
		void update();
	};

	struct qsound_echo {
		uint16_t m_end_pos = 0;

		int16_t m_feedback = 0;
		int16_t m_length = 0;
		int16_t m_last_sample = 0;
		int16_t m_delay_line[1024] = { 0 };
		int16_t m_delay_pos = 0;

		int16_t apply(int32_t input);
	};

	// MAME resources
	required_region_ptr<INT8> m_sample_rom;
	sound_stream *m_stream;

	uint16_t m_data_latch;
	int16_t m_out[2];

	qsound_voice m_voice[16];
	qsound_adpcm m_adpcm[3];

	uint16_t m_voice_pan[16+3];
	int16_t m_voice_output[16+3];

	qsound_echo m_echo;

	qsound_fir m_filter[2];
	qsound_fir m_alt_filter[2];

	qsound_delay m_wet[2];
	qsound_delay m_dry[2];

	uint16_t m_state;
	uint16_t m_next_state;

	uint16_t m_delay_update;

	int m_state_counter;
	int m_ready_flag;

	uint16_t *m_register_map[256];

	inline uint16_t read_dsp_rom(uint16_t addr){ return m_tables[addr&0xfff]; }

	void write_data(uint8_t addr, uint16_t data);
	uint16_t read_data(uint8_t addr);

	void init_register_map();
	void update_sample();

	// DSP states
	void state_init();
	void state_refresh_filter_1();
	void state_refresh_filter_2();
	void state_normal_update();

	// sub functions
	int16_t read_sample(uint16_t bank, uint16_t address);

	inline INT8 read_byte(UINT32 offset) { return m_sample_rom[offset & m_sample_rom.mask()]; }

};

//DECLARE_DEVICE_TYPE(QSOUND, qsound_device)
extern const device_type QSOUND;

#endif // MAME_SOUND_QSOUNDHLE_H
